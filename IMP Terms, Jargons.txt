problem statement - A hotel website which contains their food menu with a certain number of items but no technology.

solution- Integrate a chatbot to the bottom right and a person can say New order or track order, if i'm saying new order it will show me all the items which are available and add or remove items.

- A person will also be able to track their order.
- When an item not in the menu is asked it will say we do not support these items.



Scope Of Work (SOW)-

Business managers would come up with big projects and they will have so many features that they would want to implement but when you start any project in the first phase you don't Implement all the features you have to scope it down. so here is a huge list of requirement you come up with the initial set of features that you're going to implement and this is called scoping your work.



-Feasibility Impact Analysis/Backlog
 
Engineers who are working on this project so there will be engineering team or data scientist team there are a business team they will have conversation they will do negotiation they will say hey this feature will take one month this feature will take five days uh which one you want to pick and business will come up with their most desired items okay so they will say Okay I want to implement these two items placing a new order and tracking the order and that decision is dependent on two factors one is how important is that feature second thing is feasibility uh there is a term called "feasibility impact analysis" let's say this feature is very important supporting payment through a chatbot business will say yes this is very important but data scientists will say well it will take two months then that feature has a high impact but low visibility on the other hand you can have a feature which is very high feasibility but low impact for example store hours implementing store hours is a piece of cake you can implement it in half a day maybe but it doesn't have too much impact okay so you want to Target those features which has high impact high visibility. After a closed room discussion between business stakeholders and data scientists they decided these are the two features which we should Implement in our first round so what we had initially was all these features if you put it in a flat vertical list this is called your "backlog".



-MVP (Minimum Viable Product)

Selected Two features, once these two features are out now you will have minimum viable product which is your first version which you can deploy you can test with users, users will give you some feedback after the feedback some of your backlog items will change because business is dynamic.


-DialogFlow

ES-Less Expensive
CX-More Expensive



-Intent

 it's just a mapping between what user says and what action will be taken by a chat bot	or your backend

-Default Welcome Intent

What the chatbot says or replies to user when beginning

-Default Fallback Intent

what the chatbot says or replies when it didn't understand what's the user is saying

(cloudflared tunnel --url http://localhost:8000)

uvicorn backend.main:app --host 0.0.0.0 --port 10000



I independently developed an end-to-end food ordering chatbot using Dialogflow for NLP and FastAPI for backend API development. The chatbot handles natural language queries, manages user sessions for ongoing orders, and interacts with a MySQL database to insert, track, and cancel food orders dynamically. I implemented modular intent handling for actions such as adding, removing, completing, tracking, and canceling orders, ensuring smooth conversational flow. Integrated real-time order tracking and error handling mechanisms to improve user experience. Designed and deployed a responsive front-end interface using HTML/CSS that displays a dynamic menu alongside the chatbot widget. Optimized database transactions using stored procedures and ensured ACID compliance for operations like order placement and cancellation. Successfully reduced redundant queries and improved processing efficiency using a session-based in-memory store. The project simulates a real-world restaurant ordering system and demonstrates full-cycle API development, database integration, and user interface implementation.

